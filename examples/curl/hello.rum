import curl
import compiler
import base

CRUMMS : struct { // Curl Rumi Memory Struct
  memory: *u8;
  size: u64;
};

crumWriteCallback := (contents: any, size: u64, nmemb: u64, userp: *CRUMMS) -> u64{
  realsize := size * nmemb ;
  ptr :*u8= realloc(userp.memory, userp.size + realsize + 1);
  if(!ptr){
    printf("Not enough memory\n");
    return 0;
  }
  userp.memory = ptr;
  memcpy(&(userp.memory[userp.size]), contents, realsize);
  userp.size = userp.size + realsize ;
  userp.memory[userp.size] = 0;

  return realsize;
}

main := () -> unit {
  curl : *CURL = curl_easy_init();
  chunk: CRUMMS ;
  chunk.size = 0;
  chunk.memory = malloc(1);
  if(curl){
    curl_easy_setopt(curl, CURLoption.CURLOPT_URL, "https://example.com");
    curl_easy_setopt(curl, CURLoption.CURLOPT_FOLLOWLOCATION, 1);
    curl_easy_setopt(curl, CURLoption.CURLOPT_WRITEFUNCTION, &crumWriteCallback);
    curl_easy_setopt(curl, CURLoption.CURLOPT_WRITEDATA, &chunk);

    res := curl_easy_perform(curl); // TODO: possible bug!!!
    /*
    * When calling the function
curl_easy_perform := (handle: *CURL) -> CURLcode;
      Rumi wasn't able to store the result in res.
    */
    if(res != CURLcode.CURLE_OK){
      printf("curl failed: %s\n", curl_easy_strerror(res));
    } else {
      printf("%s\n", chunk.memory);
    }

    free(chunk.memory);
    curl_easy_cleanup(curl);
  }
  return 0;
}

@compile
build := (c: *Compiler) -> int{
  c.link("-lcurl");
  return 0;
}