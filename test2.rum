printInt := (i: int) -> unit;
printString := (s: string) -> unit;
malloc := (i: int) -> *any;
free := (i: *any) -> unit;
printf := (f: string, a: ...any)->unit;

TestS: struct{
  id: int;
}

TestS.print := () -> unit{
  printf("<TestS id=%d>\n", self.id);
  //printf("Inside TestS Print!\n");
  return ;
}

TestS.getId := () -> int{
  return self.id;
}

Printable: interface{
  print := () -> unit;
}

main := () -> int {

  i: Printable;
  ip: *Printable = malloc(sizeof Printable);

  t : *TestS = malloc(sizeof TestS);
  //t : TestS;

  i = t -> Printable;
  *ip = i;

  t.id = 10;

  t.print();
  tmp := t.getId();

  t2 := t.id;

  printf("t.getId() = %d\nt.id=%d\n", tmp, t2);

  i.print();
  ip.print();

  return 0;
}