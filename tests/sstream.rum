import test_import;

sstring_node: struct {
  next: *sstring_node;
  s: string;
}
sstring: struct{
  first: *sstring_node;
  last: *sstring_node;
}
new sstring := () -> unit{
  using self;
  first = 0;
  last = 0;
}

sstring + string := (lhs: *sstring, rhs: string) -> sstring{
  node : *sstring_node = malloc(sizeof sstring_node);
  if(lhs.last) lhs.last.next = node;
  lhs.last = node;
  node.s = rhs;

  node.next = 0;

  if(!lhs.first){
    lhs.first = node;
  }

  return *lhs;
}

sstring.toString := () -> string{
  size := 1; // \0
  node := self.first;
  while(node){
    size = size +  strlen(node.s);
    node = node.next;
  }
  ans : *u8 = malloc(sizeof u8 * size);
  counter := 0;

  node = self.first;
  while(node){
    i := 0;
    s : *u8 = node.s;
    while(*(s+i)){
      *(ans + counter) = *(s+i);
      counter = counter + 1;
      i = i + 1;
    }
    node = node.next;
  }

  *(ans + counter) = 0;
  return ans;
}

inttostr := (i: int) -> string{
  ans : *u8;
  size := 1;
  copy := i;
  while(copy){
    copy = copy / 10;
    size = size + 1;
  }
  ans = malloc(sizeof u8 * size);
  *(ans + size - 1) = 0;
  size = size - 2; // delete 2!
  while(i){
    *(ans + size) = (i % 10) + 48; // 48 == '0'
    i = i / 10;
    size = size - 1;
  }
  return ans;
}