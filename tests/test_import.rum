printInt := (i: int) -> unit;
printString := (s: string) -> unit;
malloc := (i: int) -> *any;
free := (i: *any) -> unit;
printf := (f: string, a: ...any)->unit;

streq := (s1: *u8, s2: *u8) -> bool{
  counter := 0;
  zero : u8 = 0 -> u8;
  while(true){
    if(*(s1+ counter) != *(s2+counter)){
      return false;
    }
    if(*(s1+counter) == zero)
      return true;

    counter = counter + 1;
  }

  return false; // unreachable
}

subset := (s1: *u8, s2: *u8) -> bool{
  counter := 0;
  zero : u8 = 0;
  while(true){
    if(*(s2+counter) == zero) return true;
    if(*(s1+counter) == zero) return false;
    if(*(s1+ counter) != *(s2+counter)){
      return false;
    }
    counter = counter + 1;
  }

  return false; // unreachable
}

strlen := (s1: *u8) -> u64{
  size := 0;
  zero : u8 = 0;
  while(1){
    if((*(s1+size)) == zero)
      return size;
    size = size + 1;
  }
  return 0; // unreachable
}

strcat := (s1: *u8, s2: *u8) -> *u8{
  size := strlen(s1) + strlen(s2) + 1;
  ans : *u8 = malloc(size * sizeof u8);
  ptr := 0;
  ptr2 := 0;
  zero : u8 = 0;
  while(*(s1+ptr) != zero){
    *(ans+ptr) = *(s1+ptr);
    ptr = ptr + 1;
  }
  while(*(s2+ptr2) != zero){
    *(ans+ptr) = *(s2+ptr2);
    ptr = ptr + 1;
    ptr2 = ptr2 + 1;
  }
  *(ans+ptr) = zero;
  return ans;
}

fopen := (s: string, mod: string) -> *int;
fseek := (f: *int, offset: u64, whence: u32) -> int; // SEEK_END == 2, SEEK_SET == 0
ftell := (f: *int) -> int;
fread := (buf: string, size: int, nmemb: int, f: *int) -> int;

exit := (status: int) -> unit;
