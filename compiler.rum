Compiler: struct{}
Compiler.exit := (i: int) -> unit{}
Compiler.set := (s: string, v: any) -> unit{}
Compiler.get := (s: string) -> any{}


// compiler_parser TODO
Source: struct{}
Parser: struct{}
ParseResult: struct{}
Token: struct{}

Compiler.registerParser := (k: string, p: string) -> unit{}

Parser.parse := (c: *Compiler, s: *Source, pos: int) -> *ParseResult{}
Parser.parseAfter := (pr: *ParseResult) -> *ParseResult{}

ParseResult.get := (key: string) -> any{}